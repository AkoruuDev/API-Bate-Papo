Implementa√ß√£o de um bate-papo totalmente funcional, inspirado no saudoso Bate-Papo UOL. Mas n√£o seguiu o site real da UOL como refer√™ncia, pois apesar de inspirado nele, essa interface √© totalmente diferente :)

[API Chat UOL
    (https://www.notion.so/API-Chat-UOL-18842d1f9a264729a14142f2e9c3b154)

# Requisitos

- Geral
    - [ ]  N√£o utilize nenhuma biblioteca para implementar este projeto (jquery, lodash, react, etc), nem outras linguagens que compilem para JS (TypeScript, Clojure, ELM, etc), somente JavaScript puro
    - [ ]  Seu projeto dever√° ser desenvolvido utilizando Git e GitHub, em um reposit√≥rio p√∫blico
    - [ ]  **A cada requisito implementado** fa√ßa um commit com uma mensagem descritiva do que voc√™ evoluiu

- Layout
    - [ ]  Aplicar layout para mobile, seguindo figma abaixo. N√£o √© necess√°rio implementar uma vers√£o para desktop.
        [](https://github.com/AkoruuDev/API-Bate-Papo/tree/main/docs/layout)
        []./layout
    
- Chat
    - [ ]  Ao entrar no site, este deve carregar as mensagens do servidor e exibi-las conforme layout fornecido
    - [ ]  Existem 3 tipos de mensagem:
        - Mensagens de status (**Entrou** ou **Saiu** da sala): deve ter o fundo cinza
        - Mensagens reservadas (**Reservadamente**): deve ter o fundo rosa
        - Mensagens normais: devem ter o fundo branco
    - [ ]  A cada 3 segundos o site deve re-carregar as mensagens do servidor para manter sempre atualizado
    - [ ]  O chat dever√° ter rolagem autom√°tica por padr√£o, ou seja, sempre que novas mensagens forem adicionadas ao final do chat ele deve scrollar para o final
        
        **Dica**: Voc√™ pode fazer com que um elemento apare√ßa na tela utilizando a fun√ß√£o `scrollIntoView`:
        
        ||=============================================================================||
        ||   const elementoQueQueroQueApareca = document.querySelector('.mensagem');   ||
        ||   elementoQueQueroQueApareca.scrollIntoView();                              ||
        ||=============================================================================||
        
        Se `elementoQueQueroQueApareca` estiver dentro de um elemento scroll√°vel, o elemento ser√° scrollado para que o `elementoQueQueroQueApareca` fique vis√≠vel.
        
    - [ ]  As mensagens com **Reservadamente** s√≥ devem ser exibidas se o nome do destinat√°rio for igual ao nome do usu√°rio que est√° usando o chat (ou sen√£o ele poderia ver as mensagens reservadas para outras pessoas)
        - Obs: Fazer essa filtragem no front-end n√£o √© uma boa pr√°tica, o ideal seria o servidor n√£o fornecer essas mensagens para outras pessoas. Manteremos dessa forma por fins did√°ticos :)
    
- Entrada na sala
    - [ ]  Ao entrar no site, o usu√°rio dever√° ser perguntado com um `prompt` ****seu lindo nome
    - [ ]  Ap√≥s inser√ß√£o do nome, este deve ser enviado para o servidor pra cadastrar o usu√°rio
        - Caso o servidor responda com sucesso, o usu√°rio poder√° entrar na sala
        - Caso o servidor responda com erro, deve-se pedir para o usu√°rio digitar outro nome, pois este j√° est√° em uso
    - [ ]  Enquanto o usu√°rio estiver na sala, a cada 5 segundos o site deve avisar ao servidor que o usu√°rio ainda est√° presente, ou sen√£o ser√° considerado que "Saiu da sala"

- Envio de mensagem
    - [ ]  Ao enviar uma mensagem, esta deve ser enviada para o servidor
        - Caso o servidor responda com sucesso, voc√™ deve obter novamente as mensagens do servidor e atualizar o chat
        - Caso o servidor responda com erro, significa que esse usu√°rio n√£o est√° mais na sala e a p√°gina deve ser atualizada (e com isso voltando pra etapa de pedir o nome)
            
            **Dica**: experimente usar `window.location.reload()`
            
    - [ ]  Nesse envio, deve ser informado o remetente, o destinat√°rio e se a mensagem √© reservada ou n√£o.
        - Escolher um destin√°rio e se a mensagem √© reservada ou p√∫blica √© um **requisito b√¥nus**. Logo, se voc√™ n√£o implementar o b√¥nus, sempre envie destinat√°rio como **Todos** e a mensagem como **p√∫blica**.
        ver bonus em
            ../docs/bonus.txt
            https://github.com/AkoruuDev/API-Bate-Papo/blob/main/docs/bonus.txt

- **Para facilitar a corre√ß√£o do projeto** üôÇ
        
        Para agilizarmos a corre√ß√£o dos projetos e dar um feedback mais r√°pido para voc√™s, adicione o que est√° sendo pedido abaixo nos seus elementos:
        
        - Nos elementos que representam um participante, adicione o atributo `data-identifier="participant"`
        - Nos elementos que identificam a visibilidade, adicione o atributo `data-identifier="visibility"`
        
        Com as configura√ß√µes acima conseguimos automatizar parte da corre√ß√£o do projeto, acelerando o feedback.